@model List<Car_Rent.Models.Conversation>
@{
    ViewData["Title"] = "Hàng đợi chat";
    Layout = "~/Views/Shared/MainLayout.cshtml";
}
<div class="container py-4">
    <h3 class="mb-3">Hỗ trợ</h3>

    <h5 class="mt-3">Hàng đợi (chưa gán)</h5>
    <div class="table-responsive">
        <table class="table table-sm align-middle" id="queueTbl">
            <thead><tr><th>ID</th><th>Khách</th><th>Bắt đầu</th><th></th></tr></thead>
            <tbody></tbody>
        </table>
    </div>

    <h5 class="mt-4">Khách của tôi (đang mở)</h5>
    <div class="table-responsive">
        <!-- Bảng khách của tôi (đã gán) -->
        <table class="table table-sm align-middle" id="assignedTbl">
            <thead><tr><th>ID</th><th>Khách</th><th>Cập nhật</th><th>Unread</th><th></th></tr></thead>
            <tbody>
                @* Nên server-render các conv đã gán cho staff để chắc chắn có hàng *@
                @foreach (var c in (IEnumerable<Car_Rent.Models.Conversation>)ViewBag.Assigned ?? new List<Car_Rent.Models.Conversation>())
                {
                    <tr id="a-@c.ConversationId">
                        <td>@c.ConversationId</td>
                        <td>@c.Customer?.Username (@c.CustomerId)</td>
                        <td>@c.LastMessageAt.ToLocalTime().ToString("HH:mm dd/MM")</td>
                        <td class="text-center" style="width:70px">
                            <span class="badge rounded-pill" data-unread="0"></span>
                        </td>
                        <td><a class="btn btn-success btn-sm" href="/Chat/Room?id=@c.ConversationId">Vào phòng</a></td>
                    </tr>
                }
            </tbody>
        </table>

    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const aBody = document.querySelector("#assignedTbl tbody");

            function ensureAssignedRow(convId){
                let row = document.getElementById("a-" + convId);
                if (row) return row;
                // Nếu chưa có hàng, thêm nhanh để hiện Unread
                row = document.createElement("tr");
                row.id = "a-" + convId;
                row.innerHTML = `
                  <td>${convId}</td>
                  <td>Khách</td>
                  <td>${new Date().toLocaleString()}</td>
                  <td class="text-center" style="width:70px">
                    <span class="badge rounded-pill" data-unread="0"></span>
                  </td>
                  <td><a class="btn btn-success btn-sm" href="/Chat/Room?id=${convId}">Vào phòng</a></td>`;
                aBody.prepend(row);
                return row;
            }

            // Hàm set unread:
            // Lấy hàng tương ứng với convId, tìm ô có attribute là data-unread,
            // if count > 0 thêm class và số, else xóa
            function setUnread(convId, count){
                const row = ensureAssignedRow(convId);
                const cell = row.querySelector('[data-unread]');
                if (!cell) return;
                cell.textContent = count > 0 ? String(count) : '';
                cell.classList.toggle('bg-danger', count > 0);
                cell.dataset.unread = count;
            }

            // Cập nhật cả local storage khi mark as read
            function markAsRead(convId) {
                setUnread(convId, 0);

                // Cập nhật localStorage
                try {
                    let snap = JSON.parse(localStorage.getItem('cr_unread_v1') || '{}');
                    if (!snap.unread) snap.unread = {};
                    snap.unread[convId] = 0;
                    localStorage.setItem('cr_unread_v1', JSON.stringify(snap));
                    console.log(`Marked conversation ${convId} as read`);
                } catch (e) {
                    console.error('Error updating localStorage:', e);
                }
            }

            
            // reset tất cả các ô unread về 0 trước khi áp snapshot
            function resetAllUnread(){
                document.querySelectorAll('#assignedTbl tbody tr[id^="a-"]').forEach(tr => {
                    const idStr = tr.id.substring(2); // "a-123" -> "123"
                    const cid = parseInt(idStr);
                    if (!isNaN(cid)) setUnread(cid, 0);
                });
            }

            // Áp dụng snapshot ngay khi vào trang (đảm bảo reset trước)
            (function applySnapshotNow(){
                let snap = null;
                try { snap = JSON.parse(localStorage.getItem('cr_unread_v1') || '{}'); } catch {}
                resetAllUnread();
                if (snap && snap.unread) {
                    Object.entries(snap.unread).forEach(([k,v]) => setUnread(parseInt(k), v));
                }
            })();

            // Cập nhật khi layout publish snapshot mới (đảm bảo reset trước)
            window.addEventListener('chatSnapshot', (ev) => {
                const snap = ev.detail || {};
                resetAllUnread();
                if (snap.unread) {
                    Object.entries(snap.unread).forEach(([k,v]) => setUnread(parseInt(k), v));
                }
            });

            // Khi room báo đã đọc, sử dụng markAsRead
            window.addEventListener('chatMarkedRead', (ev) => {
                const convId = Number(ev.detail?.convId);
                console.log('chatMarkedRead event received:', convId);
                if (convId) markAsRead(convId);
            });

            // Xử lý event staff click vào phòng, event quan trọng để set đã đọc
            document.addEventListener('click', (e) => {
                // Kiểm tra nếu click vào link "Vào phòng"
                if (e.target.matches('a[href*="/Chat/Room"]') ||
                    e.target.closest('a[href*="/Chat/Room"]')) {

                    const link = e.target.matches('a') ? e.target : e.target.closest('a');
                    try {
                        const url = new URL(link.href);
                        const convId = parseInt(url.searchParams.get('id'));
                        if (convId && !isNaN(convId)) {
                            console.log(`Staff clicked to enter room ${convId}`);
                            markAsRead(convId);
                        }
                    } catch (error) {
                        console.error('Error parsing room URL:', error);
                    }
                }
            });

            // NEW: Xử lý khi focus trở lại trang (phòng trường hợp mở tab mới)
            window.addEventListener('focus', () => {
                // Kiểm tra nếu có conversation ID trong URL hiện tại
                const urlParams = new URLSearchParams(window.location.search);
                const currentConvId = parseInt(urlParams.get('id'));
                if (currentConvId && !isNaN(currentConvId)) {
                    markAsRead(currentConvId);
                }
            });

            // (giữ nguyên phần SignalR nếu đang dùng để seed/nhận bump)
            // ví dụ: khi có bump riêng cho 1 conv
            window.addEventListener('chatUnreadBump', (ev) => {
                const { convId, count } = ev.detail || {};
                console.log('chatUnreadBump event:', convId, count);
                if (convId) setUnread(convId, count);
                const row = document.getElementById('a-' + convId);
                if (row) {
                    row.classList.add('table-warning');
                    setTimeout(() => row.classList.remove('table-warning'), 1200);
                }
            });

            // DEBUG: Log để kiểm tra events
            console.log('Unread message handler initialized');
        });
    </script>
}

}




