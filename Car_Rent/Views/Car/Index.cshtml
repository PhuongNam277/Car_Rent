@model Car_Rent.ViewModels.Car.CarIndexVM
@{
	ViewData["Title"] = "Cars";
	Layout = "~/Views/Shared/MainLayout.cshtml";
	// Layout = null;
}

<!-- Header -->
<div class="container-fluid bg-breadcrumb">
	<div class="container text-center py-5" style="max-width:900px;">
		<h4 class="text-white display-4 mb-4">Our Cars</h4>
		<ol class="breadcrumb d-flex justify-content-center mb-0">
			<li class="breadcrumb-item"><a asp-controller="Home" asp-action="Index">Home</a></li>
			<li class="breadcrumb-item active text-primary">Cars</li>
		</ol>
	</div>
</div>

<div class="container py-5">
	<!-- NEW: DẢI DOANH NGHIỆP (TENANTS) -->
	@if (Model.Tenants?.Any() == true)
	{
		<ul class="nav nav-pills justify-content-center mb-3" id="tenantTabs">
			<li class="nav-item">
				<a class="nav-link @(Model.Filters.TenantId == null ? "active" : "")"
				   href="@Url.Action("Index", new { tenantId = (int?)null, vehicleType = Model.Filters.VehicleType, categoryId = (int?)null, sortBy = Model.Filters.SortBy, page = 1 })">
					Tất cả doanh nghiệp
				</a>
			</li>
			@foreach (var (tid, tname, tcount) in Model.Tenants)
			{
				var active = Model.Filters.TenantId == tid ? "active" : "";
				<li class="nav-item">
					<a class="nav-link @active"
					   href="@Url.Action("Index", new { tenantId = tid, vehicleType = Model.Filters.VehicleType, categoryId = (int?)null, sortBy = Model.Filters.SortBy, page = 1 })">
						@tname (@tcount)
					</a>
				</li>
			}
		</ul>
	}

	<!-- NEW: DẢI LOẠI XE (VEHICLE TYPE) -->
	<ul class="nav nav-pills justify-content-center mb-4" id="vtTabs">
		@{
			var vt = Model.Filters.VehicleType;
			string VtLink(string? vtVal) => Url.Action("Index", new
			{
				tenantId = Model.Filters.TenantId,
				vehicleType = vtVal,
				categoryId = (int?)null,    // đổi loại xe thì reset category
				sortBy = Model.Filters.SortBy,
				page = 1
			})!;
		}
		<li class="nav-item">
			<a class="nav-link @(string.IsNullOrEmpty(vt) ? "active" : "")" href="@VtLink(null)">Tất cả loại xe</a>
		</li>
		<li class="nav-item">
			<a class="nav-link @(vt == "Car" ? "active" : "")" href="@VtLink("Car")">Ô tô</a>
		</li>
		<li class="nav-item">
			<a class="nav-link @(vt == "Motorbike-Gas" ? "active" : "")" href="@VtLink("Motorbike-Gas")">Xe máy</a>
		</li>
		<li class="nav-item">
			<a class="nav-link @(vt == "Bicycle" ? "active" : "")" href="@VtLink("Bicycle")">Xe đạp</a>
		</li>
		@* (Sau này thêm EV…) <li class="nav-item"><a class="nav-link @(vt == "Motorbike-EV" ? "active" : "")" href="@VtLink("Motorbike-EV")">Xe máy điện</a></li> *@
	</ul>

	<!-- Tabs by Category -->
	<ul class="nav nav-pills justify-content-center mb-4" id="catTabs">
    <li class="nav-item">
        <a class="nav-link @(Model.Filters.CategoryId == null ? "active" : "")"
           href="@Url.Action("Index", new {
               tenantId = Model.Filters.TenantId,
               vehicleType = Model.Filters.VehicleType,
               categoryId = (int?)null,
               sortBy = Model.Filters.SortBy,
               page = 1
           })">
            All
        </a>
    </li>

    @foreach (var (id, name, count) in Model.Categories)
    {
        var active = Model.Filters.CategoryId == id ? "active" : "";
        <li class="nav-item">
            <a class="nav-link @active"
               href="@Url.Action("Index", new {
                   tenantId = Model.Filters.TenantId,
                   vehicleType = Model.Filters.VehicleType,
                   categoryId = id,
                   sortBy = Model.Filters.SortBy,
                   page = 1
               })">
                @name (@count)
            </a>
        </li>
    }
</ul>

	<!-- Filter + Sort -->
	<form method="get" class="row g-3 align-items-end mb-4">
		<input type="hidden" name="categoryId" value="@Model.Filters.CategoryId" />
		<!-- NEW: giữ doanh nghiệp & loại xe khi Apply -->
		<input type="hidden" name="tenantId" value="@(Model.Filters.TenantId?.ToString() ?? "")" />
		<input type="hidden" name="vehicleType" value="@(Model.Filters.VehicleType ?? "")" />

		<div class="col-6 col-md-2">
			<label class="form-label">Price Min</label>
			<input class="form-control" type="number" step="1" name="priceMin" value="@(Model.Filters.PriceMin?.ToString() ?? "")" />
		</div>
		<div class="col-6 col-md-2">
			<label class="form-label">Price Max</label>
			<input class="form-control" type="number" step="1" name="priceMax" value="@(Model.Filters.PriceMax?.ToString() ?? "")" />
		</div>
		<div class="col-6 col-md-2">
			<label class="form-label">Seats</label>
			<select class="form-select" name="seats">
				<option value="">Any</option>
				@foreach (var s in new[] { 4, 5, 7, 9 })
				{
					<option value="@s" selected="@(Model.Filters.Seats == s)">@s</option>
				}
			</select>
		</div>
		<div class="col-6 col-md-2">
			<label class="form-label">Transmission</label>
			<select class="form-select" name="transmission">
				<option value="">Any</option>
				@foreach (var t in new[] { "Automatic", "Manual" })
				{
					<option value="@t" selected="@(Model.Filters.Transmission == t)">@t</option>
				}
			</select>
		</div>
		<div class="col-6 col-md-2">
			<label class="form-label">Energy</label>
			<select class="form-select" name="energy">
				<option value="">Any</option>
				@foreach (var e in new[] { "Gasoline", "Diesel", "Hybrid", "Electric" })
				{
					<option value="@e" selected="@(Model.Filters.Energy == e)">@e</option>
				}
			</select>
		</div>
		<div class="col-6 col-md-2">
			<label class="form-label">Sort</label>
			<select class="form-select" name="sortBy">
				@foreach (var kv in new Dictionary<string, string>
				{
					["PriceAsc"] = "Price ↑",
					["PriceDesc"] = "Price ↓",
					["NameAsc"] = "Name A-Z",
					["NameDesc"] = "Name Z-A",
					["Newest"] = "Newest"
				})
				{
					<option value="@kv.Key" selected="@(Model.Filters.SortBy == kv.Key)">@kv.Value</option>
				}
			</select>
		</div>
		<div class="col-12 col-md-2">
			<button class="btn btn-primary w-100">Apply</button>
		</div>
	</form>

	<!-- Grid -->
	<div id="carsGrid">
		@await Html.PartialAsync("_CarGrid", Model)
	</div>

	<!-- Pagination -->
	@if (Model.TotalPages > 1)
	{
		<nav aria-label="pagination">
			<ul class="pagination justify-content-center">
				@for (int p = 1; p <= Model.TotalPages; p++)
				{
					var active = p == Model.Page ? "active" : "";
					var route = Model.Filters.ToRouteValues();
					route["page"] = p.ToString();
					route["pageSize"] = Model.PageSize.ToString();
					<li class="page-item @active">
						<a class="page-link" href="@Url.Action("Index", route)">@p</a>
					</li>
				}
			</ul>
		</nav>
	}

</div>

<!-- Quick View Modal -->
<div class="modal fade" id="quickViewModal" tabindex="-1" aria-hidden="true">
	<div class="modal-dialog modal-lg modal-dialog-centered">
		<div class="modal-content">
			<div class="modal-body p-0" id="quickViewBody">
				<!-- partial content inject here -->
			</div>
		</div>
	</div>
</div>

<!-- Compare Bar -->
<div id="compareBar" class="position-fixed bottom-0 start-0 end-0 bg-dark text-white p-3 d-none" style="z-index:1050;">
	<div class="container d-flex align-items-center justify-content-between">
		<div>
			<strong>Compare:</strong> <span id="compareCount">0</span>/3 selected
		</div>
		<div>
			<button id="btnCompare" class="btn btn-primary me-2" disabled>Compare</button>
			<button id="btnClearCompare" class="btn btn-outline-light">Clear</button>
		</div>
	</div>
</div>

@section Scripts {
	<script>
		document.addEventListener("DOMContentLoaded", () => {
			// Quick View
			document.addEventListener('click', async (e) => {
			  const btn = e.target.closest('[data-quickview]');
			  if (!btn) return;
			  const id = btn.getAttribute('data-quickview');
			  const res = await fetch(`@Url.Action("DetailsPartial")?id=${id}`);
			  const html = await res.text();
			  document.getElementById('quickViewBody').innerHTML = html;
			  const modal = new bootstrap.Modal(document.getElementById('quickViewModal'));
			  modal.show();
			});

			// Compare logic (max 3)
			const compareSet = new Set();
			function syncCompareBar(){
			  const bar = document.getElementById('compareBar');
			  const count = document.getElementById('compareCount');
			  const btn = document.getElementById('btnCompare');
			  count.textContent = compareSet.size;
			  if (compareSet.size > 0) bar.classList.remove('d-none'); else bar.classList.add('d-none');
			  btn.disabled = compareSet.size < 2;
			}
			document.addEventListener('change', (e) => {
			  const cb = e.target.closest('[data-compare]');
			  if(!cb) return;
			  const id = cb.getAttribute('data-compare');
			  if (cb.checked) {
				if (compareSet.size >= 3) { cb.checked = false; return; }
				compareSet.add(id);
			  } else {
				compareSet.delete(id);
			  }
			  syncCompareBar();
			});
			document.getElementById('btnClearCompare').addEventListener('click', ()=>{
			  document.querySelectorAll('[data-compare]').forEach(x=>x.checked=false);
			  compareSet.clear(); syncCompareBar();
			});
			document.getElementById('btnCompare').addEventListener('click', async ()=>{
			  if (compareSet.size < 2) return;
			  const ids = Array.from(compareSet).join('&ids=');
			  const res = await fetch(`@Url.Action("ComparePartial")?ids=${ids}`);
			  const html = await res.text();
			  document.getElementById('quickViewBody').innerHTML = html;
			  const modal = new bootstrap.Modal(document.getElementById('quickViewModal'));
			  modal.show();
			});
		});
	</script>
}
